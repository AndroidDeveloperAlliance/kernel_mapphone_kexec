--- arch/arm/mach-omap2/omap4_ion.c
+++ arch/arm/mach-omap2/omap4_ion.c
@@ -14,9 +14,33 @@
 #include <linux/memblock.h>
 #include <linux/omap_ion.h>
 #include <linux/platform_device.h>
+#include <plat/common.h>
 
 #include <mach/omap4_ion.h>
 
+/*
+ * Carveouts from higher end of RAM
+ *   - SMC
+ *   - ION 1D
+ *   - Ducati heap
+ *   - Tiler 2D secure
+ *   - Tiler non-secure
+ */
+
+static bool system_512m;
+
+static phys_addr_t omap4_smc_addr;
+static phys_addr_t omap4_ion_heap_secure_input_addr;
+static phys_addr_t omap4_ducati_heap_addr;
+static phys_addr_t omap4_ion_heap_tiler_mem_addr;
+static phys_addr_t omap4_ion_heap_nonsec_tiler_mem_addr;
+
+static size_t omap4_smc_size;
+static size_t omap4_ion_heap_secure_input_size;
+static size_t omap4_ducati_heap_size;
+static size_t omap4_ion_heap_tiler_mem_size;
+static size_t omap4_ion_heap_nonsec_tiler_mem_size;
+
 static struct ion_platform_data omap4_ion_data = {
 	.nr = 5,
 	.heaps = {
@@ -24,21 +48,15 @@
 			.type = ION_HEAP_TYPE_CARVEOUT,
 			.id = OMAP_ION_HEAP_SECURE_INPUT,
 			.name = "secure_input",
-			.base = PHYS_ADDR_SMC_MEM,
-			.size = -1,
 		},
 		{	.type = OMAP_ION_HEAP_TYPE_TILER,
 			.id = OMAP_ION_HEAP_TILER,
 			.name = "tiler",
-			.base = PHYS_ADDR_DUCATI_MEM,
-			.size = -1,
 		},
 		{
 			.type = OMAP_ION_HEAP_TYPE_TILER,
 			.id = OMAP_ION_HEAP_NONSECURE_TILER,
 			.name = "nonsecure_tiler",
-			.base = 0,	/* append before prior */
-			.size = -1,
 		},
 		{
 			.type = ION_HEAP_TYPE_SYSTEM,
@@ -81,35 +99,82 @@
 	int ret;
 	u32 nonsecure = omap4_ion_pdata.nonsecure_tiler2d_size;
 
+	system_512m = (omap_total_ram_size() == SZ_512M);
+
+	/* carveout sizes */
+	omap4_smc_size = (SZ_1M * 3);
+
+	if (system_512m) {
+		omap4_ion_heap_secure_input_size = 0;
+		omap4_ducati_heap_size = (SZ_1M * 83);
+		omap4_ion_heap_nonsec_tiler_mem_size = 0;
+		omap4_ion_heap_tiler_mem_size = 0;
+	} else {
+		omap4_ion_heap_secure_input_size = (SZ_1M * 90);
+		omap4_ducati_heap_size = (SZ_1M * 105);
+		omap4_ion_heap_nonsec_tiler_mem_size = nonsecure;
+		omap4_ion_heap_tiler_mem_size =
+					 (ALIGN(omap4_ion_pdata.tiler2d_size +
+					 nonsecure, SZ_2M) - nonsecure);
+	}
+
+	/* carveout addresses */
+	omap4_smc_addr = PLAT_PHYS_OFFSET + omap_total_ram_size() -
+				omap4_smc_size;
+	omap4_ion_heap_secure_input_addr = omap4_smc_addr -
+				omap4_ion_heap_secure_input_size;
+	omap4_ducati_heap_addr = omap4_ion_heap_secure_input_addr -
+				omap4_ducati_heap_size;
+	omap4_ion_heap_tiler_mem_addr = omap4_ducati_heap_addr -
+				omap4_ion_heap_tiler_mem_size;
+	omap4_ion_heap_nonsec_tiler_mem_addr = omap4_ion_heap_tiler_mem_addr -
+				omap4_ion_heap_nonsec_tiler_mem_size;
+
+	pr_info("omap4_total_ram_size = 0x%x\n" \
+				"omap4_smc_size = 0x%x\n"  \
+				"omap4_ion_heap_secure_input_size = 0x%x\n"  \
+				"omap4_ducati_heap_size = 0x%x\n"  \
+				"omap4_ion_heap_tiler_mem_size = 0x%x\n"  \
+				"omap4_ion_heap_nonsec_tiler_mem_size  = 0x%x\n",
+				omap_total_ram_size(),
+				omap4_smc_size,
+				omap4_ion_heap_secure_input_size,
+				omap4_ducati_heap_size,
+				omap4_ion_heap_tiler_mem_size,
+				omap4_ion_heap_nonsec_tiler_mem_size);
+
+	pr_info(" omap4_smc_addr = 0x%x\n"  \
+				"omap4_ion_heap_secure_input_addr = 0x%x\n"  \
+				"omap4_ducati_heap_addr = 0x%x\n"  \
+				"omap4_ion_heap_tiler_mem_addr = 0x%x\n"  \
+				"omap4_ion_heap_nonsec_tiler_mem_addr  = 0x%x\n",
+				omap4_smc_addr,
+				omap4_ion_heap_secure_input_addr,
+				omap4_ducati_heap_addr,
+				omap4_ion_heap_tiler_mem_addr,
+				omap4_ion_heap_nonsec_tiler_mem_addr);
+
 	for (i = 0; i < omap4_ion_data.nr; i++) {
 		struct ion_platform_heap *h = &omap4_ion_data.heaps[i];
-		bool backward = 0 > (s32) h->size;
-
-		if (backward)
-			h->size = -h->size;
-		if (h->base == 0)
-			/* continue after/before previous heap */
-			h->base = h[-1].base + (backward ? 0 : h[-1].size);
 
 		switch (h->id) {
 		case OMAP_ION_HEAP_SECURE_INPUT:
-			h->size = OMAP4_ION_HEAP_SECURE_INPUT_SIZE;
+			h->base = omap4_ion_heap_secure_input_addr;
+			h->size = omap4_ion_heap_secure_input_size;
 			break;
 		case OMAP_ION_HEAP_NONSECURE_TILER:
-			h->size = nonsecure;
+			h->base = omap4_ion_heap_nonsec_tiler_mem_addr;
+			h->size = omap4_ion_heap_nonsec_tiler_mem_size;
 			break;
 		case OMAP_ION_HEAP_TILER:
-			/* total TILER carveouts must be aligned to 2M */
-			h->size = ALIGN(omap4_ion_pdata.tiler2d_size +
-					nonsecure, SZ_2M) - nonsecure;
+			h->base = omap4_ion_heap_tiler_mem_addr;
+			h->size = omap4_ion_heap_tiler_mem_size;
 			break;
 		default:
 			break;
 		}
-
-		if (backward)
-			h->base -= h->size;
-		pr_info("%s: id=%u [%lx-%lx] size=%x\n", __func__, h->id,
+		pr_info("%s: %s id=%u [%lx-%lx] size=%x\n",
+					__func__, h->name, h->id,
 					h->base, h->base + h->size, h->size);
 	}
 
@@ -118,9 +183,61 @@
 		    omap4_ion_data.heaps[i].type == OMAP_ION_HEAP_TYPE_TILER) {
 			ret = memblock_remove(omap4_ion_data.heaps[i].base,
 					      omap4_ion_data.heaps[i].size);
+			if (!omap4_ion_data.heaps[i].size)
+				continue;
 			if (ret)
 				pr_err("memblock remove of %x@%lx failed\n",
 				       omap4_ion_data.heaps[i].size,
 				       omap4_ion_data.heaps[i].base);
 		}
 }
+
+phys_addr_t omap_smc_addr(void)
+{
+	return omap4_smc_addr;
+}
+
+phys_addr_t omap_ion_heap_secure_input_addr(void)
+{
+	return omap4_ion_heap_secure_input_addr;
+}
+
+phys_addr_t omap_ducati_heap_addr(void)
+{
+	return omap4_ducati_heap_addr;
+}
+
+phys_addr_t omap_ion_heap_tiler_mem_addr(void)
+{
+	return omap4_ion_heap_tiler_mem_addr;
+}
+
+phys_addr_t omap_ion_heap_nonsec_tiler_mem_addr(void)
+{
+	return omap4_ion_heap_nonsec_tiler_mem_addr;
+}
+
+size_t omap_smc_size(void)
+{
+	return omap4_smc_size;
+}
+
+size_t omap_ion_heap_secure_input_size(void)
+{
+	return omap4_ion_heap_secure_input_size;
+}
+
+size_t omap_ducati_heap_size(void)
+{
+	return omap4_ducati_heap_size;
+}
+
+size_t omap_ion_heap_tiler_mem_size(void)
+{
+	return omap4_ion_heap_tiler_mem_size;
+}
+
+size_t omap_ion_heap_nonsec_tiler_mem_size(void)
+{
+	return omap4_ion_heap_nonsec_tiler_mem_size;
+}
